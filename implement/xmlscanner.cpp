#define YY_CHAR unsigned char
#line 1 "flexskel.cpp"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: d:/cvs/Common/implement/flexskel.cpp,v 1.1.1.1 2002/01/25 16:31:40 h.Freihofer Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef WIN32
#ifndef _WIN32
#define _WIN32
#endif
#endif
/* turboc */
#ifdef __WIN32__
#ifndef _WIN32
#define _WIN32
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _WIN32
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _WIN32
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "xmlscanner.l"
#define INITIAL 0
/* -----------------------------------------------------------------------
(c) Copyrigth 1999
University of Stuttgart
Institute for Nuclear Energy and Energy Systems (IKE)
Dept. for Knowledge Engineering and Numerics (WN)
--------------------------------------------------------------------------
  ###   #    #  #######               #         #     # #     #
   #    #   #   #                    #          #  #  # ##    #
   #    #  #    #                   #           #  #  # # #   #
   #    ###     #####              #            #  #  # #  #  #
   #    #  #    #                 #             #  #  # #   # #
   #    #   #   #                #              #  #  # #    ##
  ###   #    #  #######         #                ## ##  #     #
--------------------------------------------------------------------------
file:
xmlscanner.y
--------------------------------------------------------------------------
authors:
Kopetzky, Roland        ikerkope        kopetzky@ike.uni-stuttgart.de
--------------------------------------------------------------------------
version:
1.0
--------------------------------------------------------------------------
compiler:
flex++ Version 2.3.8-7, adapted from GNU flex by Alain Coetmeur
(coetmeur@icdc.fr)
--------------------------------------------------------------------------
options:
flexpp -8 -hxmlscanner.h -oxmlscanner.cpp -Sflexskel.cpp xmlscanner.l
--------------------------------------------------------------------------
content:
Flex specification for the InformationItem XML-Import
--------------------------------------------------------------------------
notes:
------------------------------------------------------------------------ */
#define YY_XmlScanner_FLEX_SCANNER
#line 60 "xmlscanner.l"
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <strstream>

#define ST 1
#define CONTENT 2
#include "xmlscanner.h"
#line 90 "xmlscanner.l"
#line 196 "flexskel.cpp"

#define yy___stderr YY_XmlScanner_ERRFILE
#define yy___text YY_XmlScanner_TEXT
#define yy___leng YY_XmlScanner_LENG
#define yy___in YY_XmlScanner_IN
#define yy___out YY_XmlScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_XmlScanner_INIT_BUFFER( YY_XmlScanner_CURRENT_BUFFER, yy___in ); \
		YY_XmlScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_XmlScanner_DEBUG != 0
#define yy___flex_debug YY_XmlScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_XmlScanner_ECHO
#define yy___input YY_XmlScanner_INPUT
#define yy___fatal_error YY_XmlScanner_FATAL_ERROR
#define yy___wrap YY_XmlScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_XmlScanner_IFILE  *yy_input_file;

    YY_XmlScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_XmlScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_XmlScanner_DEBUG != 0
int YY_XmlScanner_DEBUG_FLAG=YY_XmlScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_XmlScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_XmlScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_XmlScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_XmlScanner_CHAR *yy___text;
int yy___leng;

YY_XmlScanner_IFILE  *yy___in = (YY_XmlScanner_IFILE  *) 0;
YY_XmlScanner_OFILE *yy___out = (YY_XmlScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_XmlScanner_CHAR *yy_c_buf_p = (YY_XmlScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_XmlScanner_CHAR c, YY_XmlScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_XmlScanner_ECHO_NOCODE
void YY_XmlScanner_CLASS::yy___echo()
{YY_XmlScanner_ECHO_CODE
}
#endif
#ifndef YY_XmlScanner_INPUT_NOCODE
int  YY_XmlScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_XmlScanner_INPUT_CODE
}
#endif
#ifndef YY_XmlScanner_FATAL_ERROR_NOCODE
void YY_XmlScanner_CLASS::yy___fatal_error(char *msg)
{YY_XmlScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_XmlScanner_WRAP_NOCODE
int  YY_XmlScanner_CLASS::yy___wrap()
{YY_XmlScanner_WRAP_CODE
}
#endif
void YY_XmlScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_XmlScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_XmlScanner_DEBUG != 0
 YY_XmlScanner_DEBUG_FLAG=YY_XmlScanner_DEBUG_INIT;
#endif
}

YY_XmlScanner_CLASS::YY_XmlScanner_CLASS(YY_XmlScanner_CONSTRUCTOR_PARAM) YY_XmlScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_XmlScanner_CONSTRUCTOR_CODE;
}
YY_XmlScanner_CLASS::~YY_XmlScanner_CLASS() 
{YY_XmlScanner_DESTRUCTOR_CODE;
 if(YY_XmlScanner_CURRENT_BUFFER)
  YY_XmlScanner_DELETE_BUFFER(YY_XmlScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 16
typedef int yy_state_type;
static const short int yy_accept[148] =
    {   0,
        0,    0,    0,    0,    0,    0,   16,   14,    3,    3,
       14,   14,   14,   14,    6,    8,    5,   12,   10,   10,
       13,    3,    0,    0,    0,    7,    0,    0,    0,    4,
        5,   12,   10,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    9,    0,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    1,    1,    1,    9,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,   12,   13,
       14,   15,   16,    1,   17,   17,   18,   19,   20,   17,
       21,   21,   21,   21,   21,   21,   22,   21,   23,   24,
       21,   21,   25,   26,   21,   21,   21,   21,   27,   21,
        1,    1,    1,    1,   21,    1,   17,   17,   17,   17,

       17,   17,   21,   21,   21,   21,   21,   28,   29,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   30,
       21,   21,    1,    1,    1,    1,    1,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21
    } ;

static const YY_CHAR yy_meta[31] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    3,    4,
        5,    1,    6,    7,    8,    1,    9,    9,    9,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10
    } ;

static const short int yy_base[184] =
    {   0,
        0,    2,   15,    0,   44,   46,  332,  510,    4,    6,
       46,    5,   44,    0,  510,  510,    0,    0,   51,   53,
      321,   58,  311,  299,   58,  510,  322,   59,  321,    0,
        0,    0,   66,    0,   68,  299,  292,   47,   61,    0,
      304,   71,   73,  510,  296,  285,   67,    0,   69,    0,
      296,  510,   82,  278,   84,  291,  290,   87,   90,  100,
      273,   92,  281,  104,   92,  103,  271,  111,  510,  110,
      116,  288,  113,  287,  267,  120,  124,  127,  113,  117,
      134,  137,  139,  141,  139,    0,  141,    0,  152,  151,
      157,  273,  154,  272,  265,  263,  161,  146,  154,  164,

      166,  159,    0,  163,    0,  203,  217,  216,  202,  200,
      205,  199,  175,  177,  176,  179,  183,  189,  211,  186,
      166,  193,  510,  186,  188,  195,  198,  196,    0,  198,
        0,  206,  126,  127,  207,  110,   86,   70,  192,  201,
      208,    0,  212,    0,   52,    2,  510,  231,  241,  251,
      261,  263,  271,  281,  288,  296,  298,  307,  315,  324,
      330,  335,  343,  352,  362,  372,  381,  391,  401,  407,
      412,  420,  429,  435,  440,  449,  459,  469,  479,  485,
      490,  495,  500
    } ;

static const short int yy_def[184] =
    {   0,
      148,  148,  147,    3,  149,  149,  147,  147,  147,  147,
      147,  150,  151,  152,  147,  147,  153,  154,  154,  154,
      155,  147,  147,  147,  150,  147,  147,  151,  147,  156,
      153,  154,  154,  157,  158,  147,  147,  147,  147,  156,
      159,  160,  158,  147,  147,  147,  147,  161,  147,  162,
      159,  147,  163,  147,  147,  161,  162,  147,  163,  147,
      147,  164,  147,  147,  165,  166,  147,  167,  147,  165,
      147,  147,  166,  147,  147,  147,  167,  147,  147,  147,
      147,  147,  168,  169,  147,  170,  147,  171,  172,  168,
      147,  147,  169,  147,  170,  171,  173,  147,  147,  147,

      173,  147,  174,  147,  175,  147,  174,  175,  147,  147,
      147,  147,  147,  147,  176,  177,  176,  147,  147,  177,
      147,  147,  147,  147,  147,  178,  179,  147,  180,  147,
      181,  178,  147,  147,  179,  147,  180,  181,  147,  147,
      147,  182,  147,  183,  182,  183,    0,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147
    } ;

static const short int yy_nxt[541] =
    {   0,
      147,    9,   10,    9,   10,   22,   22,   22,   22,   26,
      147,   27,   11,  135,   11,    8,    9,   10,    8,   12,
        8,    8,   13,    8,    8,    8,    8,   14,   15,   16,
        8,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   20,   19,   20,   23,
       29,   26,   33,   33,   33,   33,   21,   47,   21,   22,
       22,   24,   26,  132,   27,   29,   26,   33,   33,   42,
       42,   49,   42,   42,   42,   42,   48,   47,   25,   49,
       28,  120,   44,   58,   58,   62,   62,   44,   58,   58,
       50,   58,   58,   62,   62,   60,   71,  117,   72,   63,

       60,   64,   64,   60,   65,   64,   64,   66,   65,   74,
       71,   66,   76,   76,   71,  140,   72,   42,   42,   74,
       71,   76,   76,   85,   78,   76,   76,   87,   82,   82,
       44,   83,  139,   78,   84,   89,   89,   78,   82,   82,
      123,   83,   86,   91,   84,   92,   88,   94,   91,   85,
       70,   87,   73,   89,   89,   91,  102,   92,   62,   62,
       94,   91,  100,  100,  104,  100,  100,  100,  100,  102,
       90,  125,   63,  104,   93,  103,  114,  114,  114,  114,
      118,  115,  119,  105,  116,  121,  118,  118,  106,  119,
      122,  122,  121,  118,  122,  122,  128,  126,  130,  133,

      127,  134,  141,  123,  136,  133,  128,  117,  130,  120,
      133,  143,  134,  136,  133,  129,  124,  131,  141,  132,
      113,  142,  143,  135,  112,  111,  110,   93,   90,  109,
      144,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   30,   30,   31,   73,   31,   70,   99,   98,   31,
       31,   32,   32,   32,   32,   32,   81,   32,   32,   32,
       32,   35,   80,   79,   75,   69,   35,   35,   40,   67,

       40,   28,   25,   61,   40,   40,   41,   41,   43,   43,
       52,   43,   55,   54,   43,   43,   43,   51,   52,   51,
       46,   45,   51,   51,   51,   53,   39,   38,   37,   36,
       34,  147,   53,   53,   56,  147,  147,  147,   56,   57,
      147,  147,  147,   57,   59,   59,  147,   59,  147,   59,
      147,   59,   59,   68,  147,  147,  147,  147,  147,  147,
       68,   68,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   77,   77,  147,   77,  147,   77,  147,   77,
       77,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   95,  147,  147,  147,   95,   96,  147,  147,  147,
       96,   97,  147,  147,  147,  147,  147,  147,   97,   97,
      101,  101,  147,  101,  147,  147,  147,  101,  101,  107,
      147,  147,  147,  107,  108,  147,  147,  147,  108,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  137,
      147,  147,  147,  137,  138,  147,  147,  147,  138,  145,

      147,  147,  147,  145,  146,  147,  147,  147,  146,    7,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147
    } ;

static const short int yy_chk[541] =
    {   0,
        0,    1,    1,    2,    2,    9,    9,   10,   10,   12,
        0,   12,    1,  146,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    6,    6,   11,
       13,   13,   19,   19,   20,   20,    5,   38,    6,   22,
       22,   11,   25,  145,   25,   28,   28,   33,   33,   35,
       35,   39,   42,   42,   43,   43,   38,   47,   47,   49,
       49,  138,   35,   53,   53,   55,   55,   43,   58,   58,
       39,   59,   59,   62,   62,   53,   65,  137,   65,   55,

       58,   60,   60,   59,   60,   64,   64,   60,   64,   66,
       66,   64,   68,   68,   70,  136,   70,   71,   71,   73,
       73,   76,   76,   79,   68,   77,   77,   80,   78,   78,
       71,   78,  134,   76,   78,   81,   81,   77,   82,   82,
      133,   82,   79,   83,   82,   83,   80,   84,   84,   85,
       85,   87,   87,   89,   89,   90,   98,   90,   91,   91,
       93,   93,   97,   97,   99,  100,  100,  101,  101,  102,
      102,  121,   91,  104,  104,   98,  113,  113,  114,  114,
      115,  114,  115,   99,  114,  116,  116,  117,  100,  117,
      118,  118,  120,  120,  122,  122,  124,  122,  125,  126,

      122,  126,  139,  118,  127,  127,  128,  128,  130,  130,
      132,  140,  132,  135,  135,  124,  119,  125,  141,  141,
      112,  139,  143,  143,  111,  110,  109,  108,  107,  106,
      140,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  152,  152,  153,   96,  153,   95,   94,   92,  153,
      153,  154,  154,  154,  154,  154,   75,  154,  154,  154,
      154,  155,   74,   72,   67,   63,  155,  155,  156,   61,

      156,   57,   56,   54,  156,  156,  157,  157,  158,  158,
       51,  158,   46,   45,  158,  158,  158,  159,   41,  159,
       37,   36,  159,  159,  159,  160,   29,   27,   24,   23,
       21,    7,  160,  160,  161,    0,    0,    0,  161,  162,
        0,    0,    0,  162,  163,  163,    0,  163,    0,  163,
        0,  163,  163,  164,    0,    0,    0,    0,    0,    0,
      164,  164,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  167,  167,    0,  167,    0,  167,    0,  167,
      167,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  170,    0,    0,    0,  170,  171,    0,    0,    0,
      171,  172,    0,    0,    0,    0,    0,    0,  172,  172,
      173,  173,    0,  173,    0,    0,    0,  173,  173,  174,
        0,    0,    0,  174,  175,    0,    0,    0,  175,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  180,
        0,    0,    0,  180,  181,    0,    0,    0,  181,  182,

        0,    0,    0,  182,  183,    0,    0,    0,  183,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_XmlScanner_DEBUG != 0
static const short int yy_rule_linenum[15] =
    {   0,
       92,   96,  100,  102,  106,  110,  111,  116,  120,  124,
      125,  130,  134,  138
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "flexskel.cpp"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_XmlScanner_LEX_DEFINED
YY_XmlScanner_LEX_RETURN YY_XmlScanner_LEX ( YY_XmlScanner_LEX_PARAM )
YY_XmlScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_XmlScanner_LEX_RETURN YY_XmlScanner_CLASS::YY_XmlScanner_LEX ( YY_XmlScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_XmlScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "flexskel.cpp"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_XmlScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_XmlScanner_OFILE_DEFAULT;

	if ( YY_XmlScanner_CURRENT_BUFFER )
	    YY_XmlScanner_INIT_BUFFER( YY_XmlScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_XmlScanner_CURRENT_BUFFER = YY_XmlScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_XmlScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "flexskel.cpp"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 148 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 147 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "flexskel.cpp"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "flexskel.cpp"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_XmlScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_XmlScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<std::endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_XmlScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
		<<" (\""<<(char *)yy___text<<"\")"<<std::endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_XmlScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
			<<" (\""<<(char *)yy___text<<"\")"<<std::endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_XmlScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<std::endl;
#endif
		else
#ifndef YY_XmlScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<std::endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 92 "xmlscanner.l"
{
							BEGIN(CONTENT);
							return XmlParser::DOCTYPE;
						}
	YY_BREAK
case 2:
#line 96 "xmlscanner.l"
{
							BEGIN(CONTENT);
							return XmlParser::DOCTYPE;
						}
	YY_BREAK
case 3:
#line 100 "xmlscanner.l"
{	/* ignore */	}
	YY_BREAK
case 4:
#line 102 "xmlscanner.l"
{
							yylval.s = strdup((const char *)yytext+1);
							return XmlParser::START;
						}
	YY_BREAK
case 5:
#line 106 "xmlscanner.l"
{
							yylval.s = strdup((const char *)yytext);
							return XmlParser::NAME;
						}
	YY_BREAK
case 6:
#line 110 "xmlscanner.l"
{	return XmlParser::EQ;	}
	YY_BREAK
case 7:
#line 111 "xmlscanner.l"
{
							strncpy((char*)yytext+yyleng-1,"\0",1);
							yylval.s = strdup((const char *)yytext+1);
							return XmlParser::VALUE;
						}
	YY_BREAK
case 8:
#line 116 "xmlscanner.l"
{
							BEGIN(CONTENT);
							return XmlParser::CLOSE;
						}
	YY_BREAK
case 9:
#line 120 "xmlscanner.l"
{
							yyless(0);
							BEGIN(ST);
						}
	YY_BREAK
case 10:
#line 124 "xmlscanner.l"
{	/* ignore */	}
	YY_BREAK
case 11:
#line 125 "xmlscanner.l"
{
							strncpy((char*)yytext+yyleng-1,"\0",1);
							yylval.s = strdup((const char *)yytext+2);
							return XmlParser::END;
						}
	YY_BREAK
case 12:
#line 130 "xmlscanner.l"
{
							yylval.s = strdup((const char *)yytext);
							return XmlParser::DATA;
						}
	YY_BREAK
case 13:
#line 134 "xmlscanner.l"
{
							yylval.s = strdup((const char *)yytext);
							return XmlParser::DATA;
						}
	YY_BREAK
case 14:
#line 138 "xmlscanner.l"
{
							strError << "UNDEFINED: " << yytext << std::endl;
						}
	YY_BREAK
case 15:
#line 142 "xmlscanner.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST):
case YY_STATE_EOF(CONTENT):
    yyterminate();
#line 493 "flexskel.cpp"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "flexskel.cpp"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_XmlScanner_DEBUG != 0
#ifndef YY_XmlScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
			yy___stderr <<"action # "<<(int)yy_act<<std::endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_XmlScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_XmlScanner_CHAR *dest = YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_XmlScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_XmlScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_XmlScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_XmlScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_XmlScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_XmlScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_XmlScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "flexskel.cpp"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 148 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "flexskel.cpp"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_XmlScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 148 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 147);
#line 755 "flexskel.cpp"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_XmlScanner_CHAR c, register YY_XmlScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_XmlScanner_CHAR c;
register YY_XmlScanner_CHAR *yy_bp;
#endif
#else
void YY_XmlScanner_CLASS::yyunput( YY_XmlScanner_CHAR c, YY_XmlScanner_CHAR *yy_bp )
#endif

    {
    register YY_XmlScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_XmlScanner_CHAR *dest =
	    &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[YY_XmlScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_XmlScanner_CHAR *source =
	    &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_XmlScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_XmlScanner_CLASS::input()
#endif
    {
    int c;
    YY_XmlScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_XmlScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_XmlScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_XmlScanner_RESTART( YY_XmlScanner_IFILE  *input_file )
#else
void YY_XmlScanner_RESTART( input_file )
YY_XmlScanner_IFILE  *input_file;
#endif
#else
void YY_XmlScanner_CLASS::YY_XmlScanner_RESTART ( YY_XmlScanner_IFILE  *input_file )
#endif

    {
    YY_XmlScanner_INIT_BUFFER( YY_XmlScanner_CURRENT_BUFFER, input_file );
    YY_XmlScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_XmlScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_XmlScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_XmlScanner_CLASS::YY_XmlScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_XmlScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_XmlScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_XmlScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_XmlScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_XmlScanner_CURRENT_BUFFER = new_buffer;
    YY_XmlScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_XmlScanner_LOAD_BUFFER_STATE( void )
#else
void YY_XmlScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_XmlScanner_CLASS::YY_XmlScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_XmlScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_XmlScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_XmlScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_XmlScanner_CREATE_BUFFER( YY_XmlScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_XmlScanner_CREATE_BUFFER( file, size )
YY_XmlScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_XmlScanner_CLASS::YY_XmlScanner_CREATE_BUFFER( YY_XmlScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_XmlScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_XmlScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_XmlScanner_CREATE_BUFFER()" );

    YY_XmlScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_XmlScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_XmlScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_XmlScanner_CLASS::YY_XmlScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_XmlScanner_CURRENT_BUFFER )
	YY_XmlScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_XmlScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_XmlScanner_IFILE  *file )
#else
void YY_XmlScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_XmlScanner_IFILE  *file;
#endif
#else
void YY_XmlScanner_CLASS::YY_XmlScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_XmlScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 142 "xmlscanner.l"


/* -----------------------------------------------------------------------
                                 E O F         
----------------------------------------------------------------------- */